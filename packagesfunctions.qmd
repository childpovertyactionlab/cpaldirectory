---
title: "Functions"
title-block-banner: TRUE
fig-width: 7
fig-height: 5
warning: FALSE
error: TRUE
echo: TRUE
message: FALSE
---

## ETL Packages
In `R` we primarily use packages from the tidyverse in our analysis pipeline such as dplyr, tidyr, and stringr among others. These are the following packages you should have installed on your computer for visualization across the team.

```{r}
#| echo: TRUE

library(tidyverse) # Hadley Wickham universe of packages
library(tidycensus) # Interaction with census API
library(googlesheets4) # Interaction with google ecosystem
library(sf) # Geographic analysis and data wrangling
library(arcgisbinding) # interaction with ArcGIS
library(tidygeocoder) # geocoding
library(tigris) # shapefiles
```

## Visualization Packages
In `R` we primarily use a mix of the ggplot2, plotly, and leaflet. Packages for data visualization. These are the following packages you should have installed on your computer for visualization across the team.

```{r}
#| echo: TRUE

library(cpaltemplates)
library(shiny) # dashboard tool
library(ggplot2) # visualization
library(leaflet) # interactive maps
library(leaflet.extras) # more map options
library(plotly) # interactive graphs
library(reactable) # interactive tables
```

## cpaldirectory

Directory for CPAL Analytics team to organize visualization code and projects into a centralized location. This website is built from this repository.

You can install the latest version of `cpaldirectory` from GitHub:

```{r}
# install.packages("devtools")
#devtools::install_github("childpovertyactionlab/cpaldirectory")
```

## cpaltemplates

Primary package containing templates and tools for new project generation across CPAL Analytics data projects. Contains templates for shiny, web reports, websites, project directories, and visualizations.

You can install the latest version of `cpaltemplates` from GitHub:

```{r}
# install.packages("devtools")
#devtools::install_github("childpovertyactionlab/cpaltemplates")
```

### Usage

`library(cpaltemplates)` contains six families of functions:

`start_project()` generates a new project with a .Rproj, README, and .gitignore at the specified location on a machine.

`construct_*()` functions add multiple, related templates and documents to a project directory or sub-directory. The templates and documents are related in important ways. For example, `construct_shiny()` adds `app.R` and an R Shiny specific CSS. It also adds instructions for using the selected template.

`use_*()` functions add individual templates and documents to a project directory or sub directory.

`theme` functions contain theme styling for various R outputs.

`scale_*()` functions generate color sets to be used in visualizations.

`data` datasets stored within package to keep consistency across CPAL workflows.

#### start function

-   `start_project()` Creates a set of folders and a new Rproj file within a specified directory. Folders included are *Scripts*, *Data*, and *Graphics* to house anything necessary for a new analysis.

#### construct functions

-   `construct_shiny()` Generates an app.R file along with scss theme templates and images for a shiny dashboard with CPAL branding that can be uploaded to shinyapps.io.
-   `construct_web_report()` Generates a .qmd file along with \_quarto.yml theme templates and images for a web report with CPAL branding that can be uploaded to github pages.

#### use functions

-   `use_content()` Imports content from package templates folder into respective product types. Content such as CPAL branded images/logos.
-   `use_css()` Imports scss file where needed from package templates folder into respective product types such as web reports or fact sheets.
-   `use_git_ignore_cpal()` Generates a .gitignore file for use in files that will be uploaded to github.
-   `use_instructions()` Generates an instructions markdown document for respective product types to guide users on correct practices for use of web products.
-   `use_readme_cpal()`Generates a readme markdown document which should be filled out by user to provide necessary information project being completed.
-   `use_shiny_app()` Generates a new shiny app template for use alongside `construct_shiny()` function, when new app templates are needed.
-   `use_web_report()` Generates a new web report template for use alongside `construct_web_report()` function, when new app templates are needed.

#### theme functions

-   `cpal_shiny` Theme to be used for all CPAL branded shiny dashboards. Shiny template already contains insertion of this function.
-   `theme_cpal` Used to provide a`ggplot2` for use across all CPAL branded plots.

#### scale functions

-   `scale_fill_cpal()` Fill function used for `ggplot2` visualizations, contains three themes named *factor*, *diverge*, and *triad* that should be used with respective visualization type.
-   `scale_color_cpal()` Color function used for `ggplot2` visualizations, contains three themes named *factor*, *diverge*, and *triad* that should be used with respective visualization type.

#### datasets

-   `acs_variables` Contains commonly used acs field tables which are consistently used when pulling data from the `tidycensus` package.
-   `ntx_county` Contains a named list of the eight surrounding counties around Dallas County.
-   `cpal_leaflet` Contains attribution information for leaflet maps.
-   `cpal_mapbox` Contains mapbox link for theming leaflet maps.

## cpaltools

A package containing functions for analysis by CPAL Analytics team.

You can install the latest version of `CPALtools` from GitHub:

```{r}
# install.packages("devtools")
#devtools::install_github("childpovertyactionlab/CPALtools")
```

### Usage

`library(cpaltools)` contains three families of functions:

`Geo*` functions related to geographic interactions within data that are not currently available within commonly used GIS packages such as `sf`.

`extract_*` utility functions focused on extracting specific pieces of information from a string.

`get_*` loop functions related to downloading multiple years of data from various api's such as `tidycensus`

#### Geo* functions

  - `GeoIntersect()` Similar to the summarize within functionality within ArcGIS. Compares fields between two geography types and generates estimates between them.

#### extract_* functions

  - `extract_zip()` Extracts the 5 digit zip code from a string address.
  - `extract_city()` Extracts a city name from a string address.

#### get_* functions

  - `get_acs_years()` Pulls multiple years of data from the census api through `tidycensus` for specified fields, geographies, and years.
